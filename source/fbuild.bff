// ----------------------------------------------------------------------------
// This is a fastbuild template. It's a guide that shows how to:
// - prepare external tools (compiler's, sdk's, etc),
// - setup simple static library project,
// - setup simple application project.
//
// This file uses tab-size=3
// ----------------------------------------------------------------------------


// First lets define some variables that will hold base paths
.MSVC12_BasePath       = '../External/msvc-12.4-amd64'    // Visual Studio 2013
.MSVC14_BasePath       = '../External/msvc-14.3-amd64'    // Visual Studio 2015
.MSVC15_BasePath       = '../External/msvc-15.0-amd64'    // Visual Studio 2017
.WinSDK81_BasePath     = '../External/winsdk-8.1'         //
.WinSDK10_BasePath     = '../External/winsdk-10'          //
.WinClang_BasePath     = '../External/clang-win-5.0.0'    //
.WinVulkanSDK_BasePath = '../External/vulkansdk-1.0.54.0' //

// The same goes for some temporaries
#if __WINDOWS__
Settings {
	#import TMP
	.Environment = {
		"TMP=$TMP$",
		"SystemRoot=C:\Windows"
	}
	.CachePath = '$TMP$\.fbuild.cache'
}
#endif //__WINDOWS__
#if __LINUX__
Settings {
	.CachePath = "/tmp/.fbuild.cache"
}
#endif //__LINUX__

// Prepare compilers (MSVC, Clang, GCC)
// --------------------------------------------------------
Compiler('Compiler-MSVC12') {
	.Root       = '$MSVC12_BasePath$\bin'
	.Executable = '$Root$\cl.exe'
	.ExtraFiles = {
		'$Root$\c1.dll'
		'$Root$\c1ast.dll',
		'$Root$\c1xx.dll',
		'$Root$\c1xxast.dll',
		'$Root$\c2.dll',
		'$Root$\1033\clui.dll'
		'$Root$\msobj120.dll'
		'$Root$\mspdb120.dll'
		'$Root$\mspdbsrv.exe'
		'$Root$\mspdbcore.dll'
		'$Root$\mspft120.dll'
		'$Root$\msvcp120.dll'
		'$Root$\msvcr120.dll'
		'$Root$\vccorlib120.dll'
	}
}
Compiler('Compiler-MSVC14') {
	.Root       = '$MSVC14_BasePath$\bin'
	.Executable = '$Root$\cl.exe'
	.ExtraFiles = {
		'$Root$\c1.dll',
		'$Root$\c2.dll',
		'$Root$\c1xx.dll',
		'$Root$\1033\clui.dll',
		'$Root$\msobj140.dll',
		'$Root$\mspdb140.dll',
		'$Root$\mspdbsrv.exe',
		'$Root$\mspdbcore.dll',
		'$Root$\mspft140.dll',
		'$Root$\msvcp140.dll',
		'$Root$\vcruntime140.dll',
		'$Root$\vccorlib140.dll'
	}
}
Compiler('Compiler-MSVC15') {
	.Root       = '$MSVC15_BasePath$\bin'
	.Executable = '$Root$\cl.exe'
	.ExtraFiles = {
		'$Root$\c1.dll',
		'$Root$\c2.dll',
		'$Root$\c1xx.dll',
		'$Root$\1033\clui.dll',
		'$Root$\msobj140.dll',
		'$Root$\mspdb140.dll',
		'$Root$\mspdbsrv.exe',
		'$Root$\mspdbcore.dll',
		'$Root$\mspft140.dll',
		'$Root$\msvcp140.dll',
		'$Root$\vcruntime140.dll',
		'$Root$\vccorlib140.dll'
	}
}
Compiler('Compiler-ClangWin') {
	.Root       = '$WinClang_BasePath$'
	.Executable = '$Root$\bin\clang.exe'
}
Compiler('Compiler-GCC') {
	.Executable = '/usr/bin/gcc'
}
Compiler('Compiler-Clang') {
	.Executable = '/usr/bin/clang'
}

.OutputBase = '../temp'                // Base output directory for our build/project/solution files
.UnityInputIsolateWritableFiles = true // Unity/Blob files (shared across configs)

// Microsoft Visual Studio 2013 - x64 Build
//---------------------------------------------------------
.MSVC12_BaseConfig = [
	.AdditionalWarnings = '' // 'wd' disables warning 'we' enables
		+ ' /wd4820' // padding added after data member
	.CompilerOptions = ''
		+ '"%1" /Z7'            // 
		+ ' /nologo'            // Suppresses the display of the copyright banner
		+ ' /c'                 // Compiles without linking
		+ ' /W4'                // Warning level 4
		+ ' /Wall'              // Displays all warnings
		//+ ' /WX'                // Treat warnings as errors
		//+ ' /TP'                // Compile as C++
		+ ' /Zc:inline'         // Remove unreferenced COMDATs at compile time (VS2013.2+)
		+ ' /Zc:strictStrings'  // Require const only usage of string literals (VS2013+)
		+ .AdditionalWarnings   // See above
		+ ' /fp:fast'           // Specifies floating-point behavior
		+ ' /D"WIN32_LEAN_AND_MEAN" /D_WIN32 /D__WINDOWS__'
		//+ ' /D"_CRT_SECURE_NO_WARNINGS"' // don't warn about unsafe functions
		//+ ' /D"_WINSOCK_DEPRECATED_NO_WARNINGS"' // don't warn about deprecated winsock functions
	.PCHOptions       = '' + .CompilerOptions + ' /Fp"%2" /Fo"%3"'
	.CompilerOptions  + ' /Fo"%2"'
	.LibrarianOptions = ''
		+ ' /NODEFAULTLIB'   // Ignores all default libraries
		+ ' /NOLOGO'         // Suppresses the display of the copyright banner
		+ ' /OUT:"%2" "%1"'
	.LinkerOptions    = ''
		+ ' /NODEFAULTLIB'   // Ignores all default libraries
		+ ' /NOLOGO'         // Suppresses the display of the copyright banner
		+ ' /INCREMENTAL:NO' // Turn off incremental linking
		+ ' /OUT:"%2" "%1"'
		+ ' /DEBUG'          // Creates debugging information
		+ ' /IGNORE:4001'    // don't complain about linking libs only
	.CompilerDebugOptimizations = ''
		+ ' /MTd'   // Creates a debug multithreaded executable file using LIBCMTD.lib
		+ ' /Od'    // Disables optimization
		+ ' /RTC1'  // Enables run-time error checks
		+ ' /GS'    // Buffers security check
		+ ' /Oy-'   // Disable omiting frame pointer (x86 only)
		+ ' /Oi'    // Generates intrinsic functions
		+ ' /GR-'   // Disables run-time type information (RTTI)
		+ ' /EHa-'  // Disables exceptions
	.CompilerReleaseOptimizations  = ''
		+ ' /MT'    // Creates a multithreaded executable file using LIBCMT.lib
		+ ' /Ox'    // Uses maximum optimization
		+ ' /Oy'    // Omits frame pointer (x86 only)
		+ ' /Oi'    // Generates intrinsic functions
		+ ' /GS-'   // Disables buffers security check
		+ ' /GF'    // Enables string pooling
		+ ' /GL'    // Enables whole program optimization
		+ ' /Gy'    // Enables function-level linking
		+ ' /Gw'    // Enables whole-program global data optimization
		+ ' /GR-'   // Disables run-time type information (RTTI)
		+ ' /EHa-'  // Disables exceptions
	.LibrarianDebugOptimizations   = ''
	.LibrarianReleaseOptimizations = ' /LTCG' // Specifies link-time code generation.
	.LinkerDebugOptimizations      = ''
	.LinkerReleaseOptimizations    = ' /LTCG'	// Specifies link-time code generation.
		+ ' /OPT:REF,ICF'
	.BaseIncludePaths = ' /I"./"'
		+ ' /I"$MSVC12_BasePath$/include"'
		+ ' /I"$WinSDK81_BasePath$/include/um"'
		+ ' /I"$WinSDK81_BasePath$/include/shared"'
		+ ' /I"./some_lib"'
		+ ' /I"./some_app"'
	.CompilerOptions + .BaseIncludePaths
	.PCHOptions      + .BaseIncludePaths
	.WindowsLibPath = '$WinSDK81_BasePath$\Lib\winv6.3\'
]
.MSVC12x64_BaseConfig =  [
	Using(.MSVC12_BaseConfig)
	.ToolsBasePath   = '$MSVC12_BasePath$\bin'
	.PlatformInfo    = 'Windows'
	.ArchInfo        = 'x64'
	.CompilerInfo    = 'MSVC12'
	.Compiler        = 'Compiler-MSVC12'
	.Librarian       = '$ToolsBasePath$\lib.exe'
	.Linker          = '$ToolsBasePath$\link.exe'
	.CompilerOptions + ' /DWIN64'
	.PCHOptions      + ' /DWIN64'
	.LinkerOptions   + ' /MACHINE:X64'
		+ ' /LIBPATH:"$WindowsLibPath$\um\x64"'
		+ ' /LIBPATH:"$MSVC12_BasePath$\lib"'
]
.MSVC12x64_DebugConfig = [
	Using(.MSVC12x64_BaseConfig)
	.Config           = 'Debug'
	.CompilerOptions  + ' /DDEBUG /D_DEBUG /DPROFILING_ENABLED'
		+ .CompilerDebugOptimizations
	.PCHOptions       + ' /DDEBUG /D_DEBUG /DPROFILING_ENABLED'
		+ .CompilerDebugOptimizations
	.LibrarianOptions + .LibrarianDebugOptimizations
	.LinkerOptions    + .LinkerDebugOptimizations
		+ ' libcmtd.lib kernel32.lib'
]
.MSVC12x64_ReleaseConfig = [
	Using(.MSVC12x64_BaseConfig)
	.Config          = 'Release'
	.CompilerOptions + ' /DRELEASE'
	.PCHOptions      + ' /DRELEASE'

	// Setup de-optimization options (FASTBUILD_DEOPTIMIZE_OBJECT)
	.DeoptimizeWritableFilesWithToken = true
	.CompilerOptionsDeoptimized       = '$CompilerOptions$ /Od'
	.PCHOptionsDeoptimized            = '$PCHOptions$ /Od'

	.CompilerOptions  + .CompilerReleaseOptimizations
	.PCHOptions       + .CompilerReleaseOptimizations
	.LibrarianOptions + .LibrarianReleaseOptimizations
	.LinkerOptions    + .LinkerReleaseOptimizations
		+ ' libcmt.lib kernel32.lib'
]
.MSVC12x64_ProfileConfig = [
	Using(.MSVC12x64_ReleaseConfig)
	.Config          = 'Profile'
	.CompilerOptions + ' /DPROFILING_ENABLED'
	.PCHOptions      + ' /DPROFILING_ENABLED'
	.DeoptimizeWritableFilesWithToken = false
]
.ResourceCompiler = [
	.Compiler                = '$WinSDK81_BasePath$\Bin\x64\RC.exe'
	.CompilerOutputExtension = '.res'
	.CompilerOptions         = '/nologo /fo"%2" %1'
]

// Microsoft Visual Studio 2015 - x64 Build
// ----------------------------------------------------------------------------
.MSVC14_BaseConfig = [
	.AdditionalWarnings = ''
	.CompilerOptions = ''
		+ '"%1" /Z7'            // 
		+ ' /nologo'            // Suppresses the display of the copyright banner
		+ ' /c'                 // Compiles without linking
		+ ' /W4'                // Warning level 4
		+ ' /Wall'              // Displays all warnings
		//+ ' /WX'                // Treat warnings as errors
		//+ ' /TP'                // Compile as C++
		+ ' /Zc:inline'         // Remove unreferenced COMDATs at compile time (VS2013.2+)
		+ ' /Zc:strictStrings'  // Require const only usage of string literals (VS2013+)
		+ .AdditionalWarnings   // See above
		+ ' /fp:fast'           // Specifies floating-point behavior
		+ ' /D"WIN32_LEAN_AND_MEAN" /D_WIN32 /D__WINDOWS__'
		//+ ' /D"_CRT_SECURE_NO_WARNINGS"' // don't warn about unsafe functions
		//+ ' /D"_WINSOCK_DEPRECATED_NO_WARNINGS"' // don't warn about deprecated winsock functions
	.PCHOptions       = '' + .CompilerOptions + ' /Fp"%2" /Fo"%3"'
	.CompilerOptions  + ' /Fo"%2"'
	.LibrarianOptions = ''
		+ ' /NODEFAULTLIB'   // Ignores all default libraries
		+ ' /NOLOGO'         // Suppresses the display of the copyright banner
		+ ' /OUT:"%2" "%1"'
	.LinkerOptions    = ''
		+ ' /NODEFAULTLIB'   // Ignores all default libraries
		+ ' /NOLOGO'         // Suppresses the display of the copyright banner
		+ ' /INCREMENTAL:NO' // Turn off incremental linking
		+ ' /OUT:"%2" "%1"'
		+ ' /DEBUG'          // Creates debugging information
		+ ' /IGNORE:4001'    // don't complain about linking libs only
	.CompilerDebugOptimizations = ''
		+ ' /MTd'   // Creates a debug multithreaded executable file using LIBCMTD.lib
		+ ' /Od'    // Disables optimization
		+ ' /RTC1'  // Enables run-time error checks
		+ ' /GS'    // Buffers security check
		+ ' /Oy-'   // Disable omiting frame pointer (x86 only)
		+ ' /Oi'    // Generates intrinsic functions
		+ ' /GR-'   // Disables run-time type information (RTTI)
		+ ' /EHa-'  // Disables exceptions
	.CompilerReleaseOptimizations  = ''
		+ ' /MT'    // Creates a multithreaded executable file using LIBCMT.lib
		+ ' /Ox'    // Uses maximum optimization
		+ ' /Oy'    // Omits frame pointer (x86 only)
		+ ' /Oi'    // Generates intrinsic functions
		+ ' /GS-'   // Disables buffers security check
		+ ' /GF'    // Enables string pooling
		+ ' /GL'    // Enables whole program optimization
		+ ' /Gy'    // Enables function-level linking
		+ ' /Gw'    // Enables whole-program global data optimization
		+ ' /GR-'   // Disables run-time type information (RTTI)
		+ ' /EHa-'  // Disables exceptions
	.LibrarianDebugOptimizations   = ''
	.LibrarianReleaseOptimizations = ' /LTCG' // Specifies link-time code generation.
	.LinkerDebugOptimizations      = ''
	.LinkerReleaseOptimizations    = ' /LTCG'	// Specifies link-time code generation.
		+ ' /OPT:REF,ICF'
	.BaseIncludePaths = ' /I".\"'
		+ ' /I"$MSVC14_BasePath$/include"'
		+ ' /I"$WinSDK10_BasePath$\include\10.0.15063.0\shared"'
		+ ' /I"$WinSDK10_BasePath$\include\10.0.15063.0\um"'
		+ ' /I"$WinSDK10_BasePath$\include\10.0.15063.0\ucrt"'
		+ ' /I"./some_lib"'
		+ ' /I"./some_app"'
	.CompilerOptions + .BaseIncludePaths
	.PCHOptions      + .BaseIncludePaths
	.WindowsLibPath  = '$WinSDK10_BasePath$\Lib\10.0.15063.0\'
]
.MSVC14x64_BaseConfig = [
	Using(.MSVC14_BaseConfig)
	.ToolsBasePath   = '$MSVC14_BasePath$\bin'
	.PlatformInfo    = 'Windows'
	.ArchInfo        = 'x64'
	.CompilerInfo    = 'MSVC14'
	.Compiler        = 'Compiler-MSVC14'
	.Librarian       = '$ToolsBasePath$\lib.exe'
	.Linker          = '$ToolsBasePath$\link.exe'
	.CompilerOptions + ' /DWIN64'
	.PCHOptions      + ' /DWIN64'
	.LinkerOptions   + ' /MACHINE:X64'
		+ ' /LIBPATH:"$WindowsLibPath$\ucrt\x64"'
		+ ' /LIBPATH:"$WindowsLibPath$\um\x64"'
		+ ' /LIBPATH:"$MSVC14_BasePath$\lib"'
]
.MSVC14x64_DebugConfig = [
	Using(.MSVC14x64_BaseConfig)
	.Config          = 'Debug'
	.CompilerOptions + ' /DDEBUG /D_DEBUG /DPROFILING_ENABLED'
		+ .CompilerDebugOptimizations
	.PCHOptions      + ' /DDEBUG /D_DEBUG /DPROFILING_ENABLED'
		+ .CompilerDebugOptimizations
	.LibrarianOptions + .LibrarianDebugOptimizations
	.LinkerOptions    + .LinkerDebugOptimizations
		+ ' libcmtd.lib libucrtd.lib libvcruntimed.lib kernel32.lib'
]
.MSVC14x64_ReleaseConfig = [
	Using(.MSVC14x64_BaseConfig)
	.Config          = 'Release'
	.CompilerOptions + ' /DRELEASE'
	.PCHOptions      + ' /DRELEASE'

	// Setup de-optimization options (FASTBUILD_DEOPTIMIZE_OBJECT)
	.DeoptimizeWritableFilesWithToken = true
	.CompilerOptionsDeoptimized       = '$CompilerOptions$ /Od'
	.PCHOptionsDeoptimized            = '$PCHOptions$ /Od'

	.CompilerOptions  + .CompilerReleaseOptimizations
	.PCHOptions       + .CompilerReleaseOptimizations
	.LibrarianOptions + .LibrarianReleaseOptimizations
	.LinkerOptions    + .LinkerReleaseOptimizations
		+ ' libcmt.lib libucrt.lib libvcruntime.lib kernel32.lib'
]
.MSVC14x64_ProfileConfig = [
	Using(.MSVC14x64_ReleaseConfig)
	.Config           = 'Profile'
	.CompilerOptions  + ' /DPROFILING_ENABLED'
	.PCHOptions       + ' /DPROFILING_ENABLED'
	.DeoptimizeWritableFilesWithToken = false
]

// Microsoft Visual Studio 2017 - x64 Build
//---------------------------------------------------------
.MSVC15_BaseConfig = [
	.AdditionalWarnings = ''
	.CompilerOptions = ''
		+ '"%1" /Z7'            // 
		+ ' /nologo'            // Suppresses the display of the copyright banner
		+ ' /c'                 // Compiles without linking
		+ ' /W4'                // Warning level 4
		+ ' /Wall'              // Displays all warnings
		//+ ' /WX'                // Treat warnings as errors
		//+ ' /TP'                // Compile as C++
		+ ' /Zc:inline'         // Remove unreferenced COMDATs at compile time (VS2013.2+)
		+ ' /Zc:strictStrings'  // Require const only usage of string literals (VS2013+)
		+ .AdditionalWarnings   // See above
		+ ' /fp:fast'           // Specifies floating-point behavior
		+ ' /D"WIN32_LEAN_AND_MEAN" /D_WIN32 /D__WINDOWS__'
		//+ ' /D"_CRT_SECURE_NO_WARNINGS"' // don't warn about unsafe functions
		//+ ' /D"_WINSOCK_DEPRECATED_NO_WARNINGS"' // don't warn about deprecated winsock functions
	.PCHOptions       = '' + .CompilerOptions + ' /Fp"%2" /Fo"%3"'
	.CompilerOptions  + ' /Fo"%2"'
	.LibrarianOptions = ''
		+ ' /NODEFAULTLIB'   // Ignores all default libraries
		+ ' /NOLOGO'         // Suppresses the display of the copyright banner
		+ ' /OUT:"%2" "%1"'
	.LinkerOptions    = ''
		+ ' /NODEFAULTLIB'   // Ignores all default libraries
		+ ' /NOLOGO'         // Suppresses the display of the copyright banner
		+ ' /INCREMENTAL:NO' // Turn off incremental linking
		+ ' /OUT:"%2" "%1"'
		+ ' /DEBUG'          // Creates debugging information
		+ ' /IGNORE:4001'    // don't complain about linking libs only
	.CompilerDebugOptimizations = ''
		+ ' /MTd'   // Creates a debug multithreaded executable file using LIBCMTD.lib
		+ ' /Od'    // Disables optimization
		+ ' /RTC1'  // Enables run-time error checks
		+ ' /GS'    // Buffers security check
		+ ' /Oy-'   // Disable omiting frame pointer (x86 only)
		+ ' /Oi'    // Generates intrinsic functions
		+ ' /GR-'   // Disables run-time type information (RTTI)
		+ ' /EHa-'  // Disables exceptions
	.CompilerReleaseOptimizations  = ''
		+ ' /MT'    // Creates a multithreaded executable file using LIBCMT.lib
		+ ' /Ox'    // Uses maximum optimization
		+ ' /Oy'    // Omits frame pointer (x86 only)
		+ ' /Oi'    // Generates intrinsic functions
		+ ' /GS-'   // Disables buffers security check
		+ ' /GF'    // Enables string pooling
		+ ' /GL'    // Enables whole program optimization
		+ ' /Gy'    // Enables function-level linking
		+ ' /Gw'    // Enables whole-program global data optimization
		+ ' /GR-'   // Disables run-time type information (RTTI)
		+ ' /EHa-'  // Disables exceptions
	.LibrarianDebugOptimizations   = ''
	.LibrarianReleaseOptimizations = ' /LTCG' // Specifies link-time code generation.
	.LinkerDebugOptimizations      = ''
	.LinkerReleaseOptimizations    = ' /LTCG'	// Specifies link-time code generation.
		+ ' /OPT:REF,ICF'
	.BaseIncludePaths = ' /I"./"'
		+ ' /I"$MSVC15_BasePath$/include"'
		+ ' /I"$WinSDK10_BasePath$/include/10.0.15063.0/shared"'
		+ ' /I"$WinSDK10_BasePath$/include/10.0.15063.0/um"'
		+ ' /I"$WinSDK10_BasePath$/include/10.0.15063.0/ucrt"'
		+ ' /I"./some_lib"'
		+ ' /I"./some_app"'
	.CompilerOptions + .BaseIncludePaths
	.PCHOptions      + .BaseIncludePaths
	.WindowsLibPath = '$WinSDK10_BasePath$\Lib\10.0.15063.0\'
]
.MSVC15x64_BaseConfig =  [
	Using(.MSVC15_BaseConfig)
	.ToolsBasePath	  = '$MSVC15_BasePath$\bin'
	.PlatformInfo    = 'Windows'
	.ArchInfo        = 'x64'
	.CompilerInfo    = 'MSVC15'
	.Compiler        = 'Compiler-MSVC15'
	.Librarian       = '$ToolsBasePath$\lib.exe'
	.Linker          = '$ToolsBasePath$\link.exe'
	.CompilerOptions + ' /DWIN64'
	.PCHOptions      + ' /DWIN64'
	.LinkerOptions   + ' /MACHINE:X64'
		+ ' /LIBPATH:"$WindowsLibPath$\ucrt\x64"'
		+ ' /LIBPATH:"$WindowsLibPath$\um\x64"'
		+ ' /LIBPATH:"$MSVC15_BasePath$\lib\x64"'
]
.MSVC15x64_DebugConfig = [
	Using(.MSVC15x64_BaseConfig)
	.Config           = 'Debug'
	.CompilerOptions  + ' /DDEBUG /D_DEBUG /DPROFILING_ENABLED'
		+ .CompilerDebugOptimizations
	.PCHOptions       + ' /DDEBUG /D_DEBUG /DPROFILING_ENABLED'
		+ .CompilerDebugOptimizations
	.LibrarianOptions + .LibrarianDebugOptimizations
	.LinkerOptions    + .LinkerDebugOptimizations
		+ ' libcmtd.lib libucrtd.lib libvcruntimed.lib kernel32.lib'
]
.MSVC15x64_ReleaseConfig = [
	Using(.MSVC15x64_BaseConfig)
	.Config          = 'Release'
	.CompilerOptions + ' /DRELEASE'
	.PCHOptions      + ' /DRELEASE'

	// Setup de-optimization options (FASTBUILD_DEOPTIMIZE_OBJECT)
	.DeoptimizeWritableFilesWithToken = true
	.CompilerOptionsDeoptimized       = '$CompilerOptions$ /Od'
	.PCHOptionsDeoptimized            = '$PCHOptions$ /Od'

	.CompilerOptions  + .CompilerReleaseOptimizations
	.PCHOptions       + .CompilerReleaseOptimizations
	.LibrarianOptions + .LibrarianReleaseOptimizations
	.LinkerOptions    + .LinkerReleaseOptimizations
		+ ' libcmt.lib libucrt.lib libvcruntime.lib kernel32.lib'
]
.MSVC15x64_ProfileConfig = [
	Using(.MSVC15x64_ReleaseConfig)
	.Config           = 'Profile'
	.CompilerOptions  + ' /DPROFILING_ENABLED'
	.PCHOptions       + ' /DPROFILING_ENABLED'
	.DeoptimizeWritableFilesWithToken = false
]

// LLVM Clang - Windows x64 Build
// ----------------------------------------------------------------------------
.WinClang_x64_BaseConfig = [
	.PlatformInfo   = 'Windows'
	.ArchInfo       = 'x64'
	.CompilerInfo   = 'Clang'
	.WindowsLibPath = '$WinSDK10_BasePath$/Lib/10.0.15063.0'
	.ToolsBasePath  = '$WinClang_BasePath$'
	.Compiler       = 'Compiler-ClangWin'
	.Librarian      = '$ToolsBasePath$\bin\llvm-ar.exe'
	.Linker         = '$MSVC15_BasePath$\bin\link.exe'
	
	.BaseCompilerOptions = ' -o"%2" "%1" -c -g '
		+ ' -fintegrated-as'
		+ ' -Wpedantic'
		+ ' -Wall'                                  // all warnings
		+ ' -Wextra'                                // additional warnings
		//+ ' -Werror -Wfatal-errors'                 // warnings as errors
		+ ' -Wno-ignored-attributes'
		+ ' -Wno-expansion-to-defined'
		+ ' -Wno-microsoft-anon-tag'
		+ ' -Wno-microsoft-enum-value'
		+ ' -Wno-int-to-void-pointer-cast'
		+ ' -Wno-unused-local-typedef'
		+ ' -Wno-undefined-inline'
		+ ' -Wno-deprecated-declarations'
		+ ' -Wno-ignored-pragma-intrinsic'
		+ ' -Wno-static-in-inline'
		+ ' -Wno-language-extension-token'
		+ ' -Wno-dollar-in-identifier-extension'
		+ ' -Wno-unknown-pragmas'
		// Includes
		+ ' -I"./"'
		+ ' -I"$MSVC15_BasePath$/include"'
		+ ' -I"$WinSDK10_BasePath$/include/10.0.15063.0/shared"'
		+ ' -I"$WinSDK10_BasePath$/include/10.0.15063.0/um"'
		+ ' -I"$WinSDK10_BasePath$/include/10.0.15063.0/ucrt"'
		+ ' -I"./some_lib"'
		+ ' -I"./some_app"'
		// Defines
		+ ' -DWIN32_LEAN_AND_MEAN -D_WIN32 -D__WINDOWS__ -DWIN32'
		+ ' -D_CRT_DECLARE_NONSTDC_NAMES' 
		+ ' -D_CRT_SECURE_NO_WARNINGS'
		+ ' -D_WINSOCK_DEPRECATED_NO_WARNINGS'
		// x64
		+ ' -m64'
		// MSVC compatibility
		+ ' -fms-compatibility'
		+ ' -fms-extensions'
		+ ' -fdelayed-template-parsing'
		+ ' -fmsc-version=1910' // aka MSVC-15 / Visual Studio 2017
	.CompilerOptions = .BaseCompilerOptions
	.CompilerOptionsC = ''
		+ ' -x c'            // compile a C
		+ ' -std=c11'        // allow C11 features
	.CompilerOptionsCpp = ''
		+ ' -std=c++11'      // allow C++11 features
		+ ' -fno-exceptions' // Disables exceptions
		+ ' -fno-rtti'       // Disable RTTI (Run Time Type Identification)
	.LibrarianOptions = 'rc "%2" "%1"' // NOTE: output must come first
	.LinkerOptions    = ' /WX /NOLOGO /INCREMENTAL:NO /OUT:"%2" "%1" /DEBUG'
		+ ' /LIBPATH:"$WindowsLibPath$/um/x64"'
		+ ' /LIBPATH:"$WindowsLibPath$/ucrt/x64"'
		+ ' /LIBPATH:"$MSVC15_BasePath$\lib\x64"'
		+ ' /MACHINE:X64'
	// Optimizations
	.CompilerDebugOptimizations     = ' -O0'
	.CompilerReleaseOptimizations   = ' -O2'
	.LibrarianDebugOptimizations    = ''
	.LibrarianReleaseOptimizations  = ''
	.LinkerDebugOptimizations       = ''
	.LinkerReleaseOptimizations     = ''
]
.WinClang_x64_DebugConfig = [
	Using(.WinClang_x64_BaseConfig)
	.Config           = 'Debug'
	.CompilerOptions  + ' -DDEBUG -DPROFILING_ENABLED'
		+ .CompilerDebugOptimizations
	.LibrarianOptions + .LibrarianDebugOptimizations
	.LinkerOptions    + .LinkerDebugOptimizations
		+ ' libcmtd.lib libucrtd.lib libvcruntimed.lib kernel32.lib'
]
.WinClang_x64_ReleaseConfig = [
	Using(.WinClang_x64_BaseConfig)
	.Config          = 'Release'
	.CompilerOptions + ' -DRELEASE'
	
	// Setup de-optimization options (FASTBUILD_DEOPTIMIZE_OBJECT)
	.DeoptimizeWritableFilesWithToken   = true
	.CompilerOptionsDeoptimized         = '$CompilerOptions$ /Od'
	
	.CompilerOptions  + .CompilerReleaseOptimizations
	.LibrarianOptions + .LibrarianReleaseOptimizations
	.LinkerOptions    + .LinkerReleaseOptimizations
		+ ' libcmt.lib libucrt.lib libvcruntime.lib kernel32.lib'
]
.WinClang_x64_ProfileConfig = [
	Using(.WinClang_x64_ReleaseConfig) // Note: based on Release config
	.Config          = 'Profile'
	.CompilerOptions + ' -DPROFILING_ENABLED'
	.DeoptimizeWritableFilesWithToken = false
]

// GCC - Linux x64 Build
// ----------------------------------------------------------------------------
.GCC_BaseConfig = [
	.Compiler  = 'Compiler-GCC'
	.Librarian = '/usr/bin/ar'
	.Linker    = '/usr/bin/g++'
	.BaseCompilerOptions = '-o "%2" "%1" -c -g'
		+ ' -I./'
		+ ' -I./some_lib'
		+ ' -I./some_app'
		+ ' -D__LINUX__ -D__linux__'
		+ ' -Wall -Wextra' // -Wpedantic'
		//+ ' -Werror -Wfatal-errors'
		+ ' -m64'            // x86-64
	.CompilerOptionsC   = ' -std=c11'   // allow C11 features
	.CompilerOptionsCpp = ' -std=c++11' // allow C++11 features
		+ ' -fno-exceptions' // Disables exceptions
		+ ' -fno-rtti'       // Disable RTTI (Run Time Type Identification)
	.CompilerOptions    = .BaseCompilerOptions
		// Disabled warnings
		//+ ' -Wno-invalid-offsetof'	// we get the offset of members in non-POD types
	.LinkerOptions    = '"%1" -o "%2"'
	.LibrarianOptions = 'rcs "%2" "%1"'
	.CompilerDebugOptimizations     = ' -O0'
	.CompilerReleaseOptimizations   = ' -O3'
	.LibrarianDebugOptimizations    = ''
	.LibrarianReleaseOptimizations  = ''
	.LinkerDebugOptimizations       = ''
	.LinkerReleaseOptimizations     = ''
]
.GCC_x64_BaseConfig = [
	Using(.GCC_BaseConfig)
	.PlatformInfo   = 'Linux'
	.ArchInfo       = 'x64'
	.CompilerInfo   = 'GCC'
]
.GCC_x64_DebugConfig = [
	Using(.GCC_x64_BaseConfig)
	.Config           = 'Debug'
	.CompilerOptions  + ' -DDEBUG -DPROFILING_ENABLED'
		+ .CompilerDebugOptimizations
	.LibrarianOptions + .LibrarianDebugOptimizations
	.LinkerOptions    + .LinkerDebugOptimizations
]
.GCC_x64_ReleaseConfig = [
	Using(.GCC_x64_BaseConfig)
	.Config           = 'Release'
	.CompilerOptions  + ' -DRELEASE'
		+ .CompilerReleaseOptimizations
	.LibrarianOptions + .LibrarianReleaseOptimizations
	.LinkerOptions    + .LinkerReleaseOptimizations
]
.GCC_x64_ProfileConfig = [
	Using(.GCC_x64_ReleaseConfig)
	.Config          = 'Profile'
	.CompilerOptions + ' -DPROFILING_ENABLED'
]

// Clang - Linux x64 Build
// ----------------------------------------------------------------------------
.Clang_BaseConfig = [
	.Compiler  = 'Compiler-Clang'
	.Librarian = '/usr/bin/ar'
	.Linker    = '/usr/bin/clang'
	.BaseCompilerOptions = '-o "%2" "%1" -c -g'
		+ ' -I./'
		+ ' -I./some_lib'
		+ ' -I./some_app'
		+ ' -D__LINUX__ -D__linux__'
		+ ' -Wall -Wextra' // -Wpedantic'
		//+ ' -Werror -Wfatal-errors'
		+ ' -m64'            // x86-64
	.CompilerOptionsC   = ' -std=c11'   // allow C11 features
	.CompilerOptionsCpp = ' -std=c++11' // allow C++11 features
		+ ' -fno-exceptions' // Disables exceptions
		+ ' -fno-rtti'       // Disable RTTI (Run Time Type Identification)
	.CompilerOptions    = .BaseCompilerOptions
		// Disabled warnings
		//+ ' -Wno-invalid-offsetof' // we get the offset of members in non-POD types
		+ ' -fno-strict-aliasing'    // Disable strict aliasing
	.LinkerOptions    = '"%1" -o "%2"'
	.LibrarianOptions = 'rcs "%2" "%1"'
	.CompilerDebugOptimizations     = ' -O0'
	.CompilerReleaseOptimizations   = ' -O3'
	.LibrarianDebugOptimizations    = ''
	.LibrarianReleaseOptimizations  = ''
	.LinkerDebugOptimizations       = ''
	.LinkerReleaseOptimizations     = ''
]
.Clang_x64_BaseConfig = [
	Using(.Clang_BaseConfig)
	.PlatformInfo   = 'Linux'
	.ArchInfo       = 'x64'
	.CompilerInfo   = 'Clang'
]
.Clang_x64_DebugConfig = [
	Using(.Clang_x64_BaseConfig)
	.Config           = 'Debug'
	.CompilerOptions  + ' -DDEBUG -DPROFILING_ENABLED'
		+ .CompilerDebugOptimizations
	.LibrarianOptions + .LibrarianDebugOptimizations
	.LinkerOptions    + .LinkerDebugOptimizations
]
.Clang_x64_ReleaseConfig = [
	Using(.Clang_x64_BaseConfig)
	.Config           = 'Release'
	.CompilerOptions  + ' -DRELEASE'
		+ .CompilerReleaseOptimizations
	.LibrarianOptions + .LibrarianReleaseOptimizations
	.LinkerOptions    + .LinkerReleaseOptimizations
]
.Clang_x64_ProfileConfig = [
	Using(.Clang_x64_ReleaseConfig)
	.Config          = 'Profile'
	.CompilerOptions + ' -DPROFILING_ENABLED'
]

// Configurations
// ----------------------------------------------------------------------------
.Configs = {
	.MSVC12x64_DebugConfig,    .MSVC12x64_ProfileConfig,    .MSVC12x64_ReleaseConfig,
	.MSVC14x64_DebugConfig,    .MSVC14x64_ProfileConfig,    .MSVC14x64_ReleaseConfig,
	.MSVC15x64_DebugConfig,    .MSVC15x64_ProfileConfig,    .MSVC15x64_ReleaseConfig,
	.WinClang_x64_DebugConfig, .WinClang_x64_ProfileConfig, .WinClang_x64_ReleaseConfig,
	.GCC_x64_DebugConfig,      .GCC_x64_ProfileConfig,      .GCC_x64_ReleaseConfig,
	.Clang_x64_DebugConfig,    .Clang_x64_ProfileConfig,    .Clang_x64_ReleaseConfig
}
.Configs_Windows_MSVC = {
	.MSVC12x64_DebugConfig, .MSVC12x64_ProfileConfig, .MSVC12x64_ReleaseConfig,
	.MSVC14x64_DebugConfig, .MSVC14x64_ProfileConfig, .MSVC14x64_ReleaseConfig,
	.MSVC15x64_DebugConfig, .MSVC15x64_ProfileConfig, .MSVC15x64_ReleaseConfig
}
.Configs_Windows_MSVC12	= {
	.MSVC12x64_DebugConfig, .MSVC12x64_ProfileConfig, .MSVC12x64_ReleaseConfig
}
.Configs_Windows_MSVC14	= {
	.MSVC14x64_DebugConfig, .MSVC14x64_ProfileConfig, .MSVC14x64_ReleaseConfig
}
.Configs_Windows_MSVC15	= {
	.MSVC15x64_DebugConfig, .MSVC15x64_ProfileConfig, .MSVC15x64_ReleaseConfig
}
.Configs_Windows_Clang = {
	.WinClang_x64_DebugConfig, .WinClang_x64_ProfileConfig, .WinClang_x64_ReleaseConfig
}
.Configs_Linux_GCC = {
	.GCC_x64_DebugConfig, .GCC_x64_ProfileConfig, .GCC_x64_ReleaseConfig
}
.Configs_Linux_Clang = {
	.Clang_x64_DebugConfig, .Clang_x64_ProfileConfig, .Clang_x64_ReleaseConfig
}

//------------------------------------------------------------------------------------------------------
#if __WINDOWS__
.ProjectCommon = [
	.ProjectBuildCommand   = 'cd ^$(SolutionDir)..\..\Source\ &amp; fbuild -ide -cache ^$(ProjectName)-^$(Configuration)'
	.ProjectRebuildCommand = 'cd ^$(SolutionDir)..\..\Source\ &amp; fbuild -ide -cache -clean ^$(ProjectName)-^$(Configuration)'
	.OutputDirectory       = '^$(SolutionDir)..\tmp2'
	.IntermediateDirectory = '^$(SolutionDir)..\tmp2'
	.PlatformToolset       = 'v141'
	.Platform              = 'x64' // Unused during build; Visible just in Visual Studio
	.X64Defines            = 'WIN32_LEAN_AND_MEAN;_WIN32;__WINDOWS__;WIN64;'
	.DebugDefines          = 'DEBUG;PROFILING_ENABLED'
	.ProfileDefines        = 'RELEASE;PROFILING_ENABLED'
	.ReleaseDefines        = 'RELEASE'
	.IncludeSearchPath     = ''
		+ '^$(SolutionDir)..\$WinSDK10_BasePath$\include\10.0.15063.0\ucrt;'
		+ '^$(SolutionDir)..\..\source\;'
		+ '^$(SolutionDir)..\..\source\some_lib;'
		+ '^$(SolutionDir)..\..\source\some_app;'
]
.ProjectX64Debug   = [ Using(.ProjectCommon) .Config = 'Windows-x64-MSVC15-Debug'	.PreprocessorDefinitions = .X64Defines + .DebugDefines ]
.ProjectX64Profile = [ Using(.ProjectCommon) .Config = 'Windows-x64-MSVC15-Profile' .PreprocessorDefinitions = .X64Defines + .ProfileDefines ]
.ProjectX64Release = [ Using(.ProjectCommon) .Config = 'Windows-x64-MSVC15-Release' .PreprocessorDefinitions = .X64Defines + .ReleaseDefines ]
.ProjectConfigs    = { .ProjectX64Debug, .ProjectX64Profile, .ProjectX64Release }
VCXProject('All-proj') {
	.ProjectOutput   = '..\Temp\VisualStudio\Projects\All.vcxproj'
	.ProjectFiles    = { '.\fbuild.bff' }
	.ProjectBasePath = '.\'
}
VCXProject('UpdateSolution-proj') {
	.ProjectOutput   = '..\Temp\VisualStudio\Projects\UpdateSolution.vcxproj'
	.ProjectFiles    = { '.\fbuild.bff' }
	.ProjectBasePath = '.\'
	.GenerateProjectsCommands = [
		.ProjectBuildCommand   = 'cd ^$(SolutionDir)..\..\Source\ &amp; fbuild Solution -ide'
		.ProjectRebuildCommand = 'cd ^$(SolutionDir)..\..\Source\ &amp; fbuild Solution -ide -clean'
	]
	.ProjectX64Debug   = [ Using(.ProjectX64Debug)   Using(.GenerateProjectsCommands) ]
	.ProjectX64Profile = [ Using(.ProjectX64Profile) Using(.GenerateProjectsCommands) ]
	.ProjectX64Release = [ Using(.ProjectX64Release) Using(.GenerateProjectsCommands) ]
	.ProjectConfigs    = { .ProjectX64Debug, .ProjectX64Profile, .ProjectX64Release }
}
#endif

//------------------------------------------------------------------------------------------------------
#include "some_lib/some_lib.bff"
#include "some_app/some_app.bff"

// Aliases
//------------------------------------------------------------------------------------------------------

ForEach(.Config in .Configs) {
	Using(.Config)
	Alias('All-$PlatformInfo$-$ArchInfo$-$CompilerInfo$-$Config$') {
		.Targets = {
			'some_lib-$PlatformInfo$-$ArchInfo$-$CompilerInfo$-$Config$',
			'some_app-$PlatformInfo$-$ArchInfo$-$CompilerInfo$-$Config$'
		}
	}
}

Alias('All-Windows') {
	.Targets = {
		'All-Windows-x64-MSVC12-Debug',
		//'All-Windows-x64-MSVC12-Profile',
		'All-Windows-x64-MSVC12-Release',
		'All-Windows-x64-MSVC14-Debug',
		//'All-Windows-x64-MSVC14-Profile',
		'All-Windows-x64-MSVC14-Release',
		'All-Windows-x64-MSVC15-Debug',
		//'All-Windows-x64-MSVC15-Profile',
		'All-Windows-x64-MSVC15-Release',
		'All-Windows-x64-Clang-Debug',
		//'All-Windows-x64-Clang-Profile',
		'All-Windows-x64-Clang-Release'
	}
}
Alias('All-Linux') {
	.Targets = {
		'All-Linux-x64-GCC-Debug',
		//'All-Linux-x64-GCC-Profile',
		'All-Linux-x64-GCC-Release',
		'All-Linux-x64-Clang-Debug',
		//'All-Linux-x64-Clang-Profile',
		'All-Linux-x64-Clang-Release'
	}
}
#if __WINDOWS__
Alias('All') {
	.Targets = {
		'All-Windows'
	}
}
#endif
#if __LINUX__
Alias('All') {
	.Targets = {
		'All-Linux'
	}
}
#endif

// Visual Studio Solution file generation and solution folders setup
#if __WINDOWS__
VSSolution('Solution') {
	.SolutionOutput   = '../temp/VisualStudio/Template.sln'
	.SolutionProjects = {
		'All-proj',
		'UpdateSolution-proj'
	}
	.SolutionBuildProject = 'All-proj'
	.SolutionConfigs      = .ProjectConfigs
	.Deps	= [
		.Projects = {
			'some_lib-proj',
			'some_app-proj'
		}
		.Dependencies = { 'All-proj' }
	]
	.SolutionDependencies = { .Deps }
	.Folder_0_Libs = [
		.Path     = '0. Libs'
		.Projects = {
			'some_lib-proj'
		}
	]
	.Folder_1_Apps = [
		.Path     = '1. Apps'
		.Projects = {
			'some_app-proj'
		}
	]
	.SolutionFolders = {
		.Folder_0_Libs,
		.Folder_1_Apps
	}
}
#endif